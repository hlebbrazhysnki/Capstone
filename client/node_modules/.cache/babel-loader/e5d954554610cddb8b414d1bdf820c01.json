{"ast":null,"code":"/* @flow */\n\n/*::\r\n\r\ntype DotenvParseOptions = {\r\n  debug?: boolean\r\n}\r\n\r\n// keys and values from src\r\ntype DotenvParseOutput = { [string]: string }\r\n\r\ntype DotenvConfigOptions = {\r\n  path?: string, // path to .env file\r\n  encoding?: string, // encoding of .env file\r\n  debug?: string // turn on logging for debugging purposes\r\n}\r\n\r\ntype DotenvConfigOutput = {\r\n  parsed?: DotenvParseOutput,\r\n  error?: Error\r\n}\r\n\r\n*/\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst os = require('os');\n\nfunction log(message\n/*: string */\n) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n}\n\nconst NEWLINE = '\\n';\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/;\nconst RE_NEWLINES = /\\\\n/g;\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/; // Parses src into an Object\n\nfunction parse(src\n/*: string | Buffer */\n, options\n/*: ?DotenvParseOptions */\n)\n/*: DotenvParseOutput */\n{\n  const debug = Boolean(options && options.debug);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let val = keyValueArr[2] || '';\n      const end = val.length - 1;\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"';\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"; // if single or double quoted, remove quotes\n\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end); // if double quoted, expand newlines\n\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE);\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim();\n      }\n\n      obj[key] = val;\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`);\n    }\n  });\n  return obj;\n}\n\nfunction resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n} // Populates process.env from .env file\n\n\nfunction config(options\n/*: ?DotenvConfigOptions */\n)\n/*: DotenvConfigOutput */\n{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding\n  /*: string */\n  = 'utf8';\n  let debug = false;\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path);\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`);\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.parse = parse;","map":{"version":3,"sources":["C:/Users/hleb2/CodingProjects/capstone-project/client/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","os","log","message","console","NEWLINE","RE_INI_KEY_VAL","RE_NEWLINES","NEWLINES_MATCH","parse","src","options","debug","Boolean","obj","toString","split","forEach","line","idx","keyValueArr","match","key","val","end","length","isDoubleQuoted","isSingleQuoted","substring","replace","trim","resolveHome","envPath","join","homedir","slice","config","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","prototype","hasOwnProperty","call","env","e","error","module","exports"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAEA,SAASG,GAAT,CAAcC;AAAQ;AAAtB,EAAqC;AACnCC,EAAAA,OAAO,CAACF,GAAR,CAAa,mBAAkBC,OAAQ,EAAvC;AACD;;AAED,MAAME,OAAO,GAAG,IAAhB;AACA,MAAMC,cAAc,GAAG,+BAAvB;AACA,MAAMC,WAAW,GAAG,MAApB;AACA,MAAMC,cAAc,GAAG,YAAvB,C,CAEA;;AACA,SAASC,KAAT,CAAgBC;AAAI;AAApB,EAA4CC;AAAQ;AAApD;AAAgF;AAAyB;AACvG,QAAMC,KAAK,GAAGC,OAAO,CAACF,OAAO,IAAIA,OAAO,CAACC,KAApB,CAArB;AACA,QAAME,GAAG,GAAG,EAAZ,CAFuG,CAIvG;;AACAJ,EAAAA,GAAG,CAACK,QAAJ,GAAeC,KAAf,CAAqBR,cAArB,EAAqCS,OAArC,CAA6C,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAChE;AACA,UAAMC,WAAW,GAAGF,IAAI,CAACG,KAAL,CAAWf,cAAX,CAApB,CAFgE,CAGhE;;AACA,QAAIc,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAME,GAAG,GAAGF,WAAW,CAAC,CAAD,CAAvB,CADuB,CAEvB;;AACA,UAAIG,GAAG,GAAIH,WAAW,CAAC,CAAD,CAAX,IAAkB,EAA7B;AACA,YAAMI,GAAG,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAzB;AACA,YAAMC,cAAc,GAAGH,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAACC,GAAD,CAAH,KAAa,GAAtD;AACA,YAAMG,cAAc,GAAGJ,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAACC,GAAD,CAAH,KAAa,GAAtD,CANuB,CAQvB;;AACA,UAAIG,cAAc,IAAID,cAAtB,EAAsC;AACpCH,QAAAA,GAAG,GAAGA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBJ,GAAjB,CAAN,CADoC,CAGpC;;AACA,YAAIE,cAAJ,EAAoB;AAClBH,UAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAYtB,WAAZ,EAAyBF,OAAzB,CAAN;AACD;AACF,OAPD,MAOO;AACL;AACAkB,QAAAA,GAAG,GAAGA,GAAG,CAACO,IAAJ,EAAN;AACD;;AAEDhB,MAAAA,GAAG,CAACQ,GAAD,CAAH,GAAWC,GAAX;AACD,KAtBD,MAsBO,IAAIX,KAAJ,EAAW;AAChBV,MAAAA,GAAG,CAAE,iDAAgDiB,GAAG,GAAG,CAAE,KAAID,IAAK,EAAnE,CAAH;AACD;AACF,GA7BD;AA+BA,SAAOJ,GAAP;AACD;;AAED,SAASiB,WAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAOA,OAAO,CAAC,CAAD,CAAP,KAAe,GAAf,GAAqBhC,IAAI,CAACiC,IAAL,CAAUhC,EAAE,CAACiC,OAAH,EAAV,EAAwBF,OAAO,CAACG,KAAR,CAAc,CAAd,CAAxB,CAArB,GAAiEH,OAAxE;AACD,C,CAED;;;AACA,SAASI,MAAT,CAAiBzB;AAAQ;AAAzB;AAAsD;AAA0B;AAC9E,MAAI0B,UAAU,GAAGrC,IAAI,CAACsC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4B,MAA5B,CAAjB;AACA,MAAIC;AAAS;AAAD,IAAiB,MAA7B;AACA,MAAI7B,KAAK,GAAG,KAAZ;;AAEA,MAAID,OAAJ,EAAa;AACX,QAAIA,OAAO,CAACX,IAAR,IAAgB,IAApB,EAA0B;AACxBqC,MAAAA,UAAU,GAAGN,WAAW,CAACpB,OAAO,CAACX,IAAT,CAAxB;AACD;;AACD,QAAIW,OAAO,CAAC8B,QAAR,IAAoB,IAAxB,EAA8B;AAC5BA,MAAAA,QAAQ,GAAG9B,OAAO,CAAC8B,QAAnB;AACD;;AACD,QAAI9B,OAAO,CAACC,KAAR,IAAiB,IAArB,EAA2B;AACzBA,MAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,MAAI;AACF;AACA,UAAM8B,MAAM,GAAGjC,KAAK,CAACX,EAAE,CAAC6C,YAAH,CAAgBN,UAAhB,EAA4B;AAAEI,MAAAA;AAAF,KAA5B,CAAD,EAA4C;AAAE7B,MAAAA;AAAF,KAA5C,CAApB;AAEAgC,IAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBzB,OAApB,CAA4B,UAAUK,GAAV,EAAe;AACzC,UAAI,CAACsB,MAAM,CAACE,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,OAAO,CAACU,GAA7C,EAAkD3B,GAAlD,CAAL,EAA6D;AAC3DiB,QAAAA,OAAO,CAACU,GAAR,CAAY3B,GAAZ,IAAmBoB,MAAM,CAACpB,GAAD,CAAzB;AACD,OAFD,MAEO,IAAIV,KAAJ,EAAW;AAChBV,QAAAA,GAAG,CAAE,IAAGoB,GAAI,qEAAT,CAAH;AACD;AACF,KAND;AAQA,WAAO;AAAEoB,MAAAA;AAAF,KAAP;AACD,GAbD,CAaE,OAAOQ,CAAP,EAAU;AACV,WAAO;AAAEC,MAAAA,KAAK,EAAED;AAAT,KAAP;AACD;AACF;;AAEDE,MAAM,CAACC,OAAP,CAAejB,MAAf,GAAwBA,MAAxB;AACAgB,MAAM,CAACC,OAAP,CAAe5C,KAAf,GAAuBA,KAAvB","sourcesContent":["/* @flow */\r\n/*::\r\n\r\ntype DotenvParseOptions = {\r\n  debug?: boolean\r\n}\r\n\r\n// keys and values from src\r\ntype DotenvParseOutput = { [string]: string }\r\n\r\ntype DotenvConfigOptions = {\r\n  path?: string, // path to .env file\r\n  encoding?: string, // encoding of .env file\r\n  debug?: string // turn on logging for debugging purposes\r\n}\r\n\r\ntype DotenvConfigOutput = {\r\n  parsed?: DotenvParseOutput,\r\n  error?: Error\r\n}\r\n\r\n*/\r\n\r\nconst fs = require('fs')\r\nconst path = require('path')\r\nconst os = require('os')\r\n\r\nfunction log (message /*: string */) {\r\n  console.log(`[dotenv][DEBUG] ${message}`)\r\n}\r\n\r\nconst NEWLINE = '\\n'\r\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\r\nconst RE_NEWLINES = /\\\\n/g\r\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\r\n\r\n// Parses src into an Object\r\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\r\n  const debug = Boolean(options && options.debug)\r\n  const obj = {}\r\n\r\n  // convert Buffers before splitting into lines and processing\r\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\r\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\r\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\r\n    // matched?\r\n    if (keyValueArr != null) {\r\n      const key = keyValueArr[1]\r\n      // default undefined or missing values to empty string\r\n      let val = (keyValueArr[2] || '')\r\n      const end = val.length - 1\r\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\r\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\r\n\r\n      // if single or double quoted, remove quotes\r\n      if (isSingleQuoted || isDoubleQuoted) {\r\n        val = val.substring(1, end)\r\n\r\n        // if double quoted, expand newlines\r\n        if (isDoubleQuoted) {\r\n          val = val.replace(RE_NEWLINES, NEWLINE)\r\n        }\r\n      } else {\r\n        // remove surrounding whitespace\r\n        val = val.trim()\r\n      }\r\n\r\n      obj[key] = val\r\n    } else if (debug) {\r\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\r\n    }\r\n  })\r\n\r\n  return obj\r\n}\r\n\r\nfunction resolveHome (envPath) {\r\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\r\n}\r\n\r\n// Populates process.env from .env file\r\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\r\n  let dotenvPath = path.resolve(process.cwd(), '.env')\r\n  let encoding /*: string */ = 'utf8'\r\n  let debug = false\r\n\r\n  if (options) {\r\n    if (options.path != null) {\r\n      dotenvPath = resolveHome(options.path)\r\n    }\r\n    if (options.encoding != null) {\r\n      encoding = options.encoding\r\n    }\r\n    if (options.debug != null) {\r\n      debug = true\r\n    }\r\n  }\r\n\r\n  try {\r\n    // specifying an encoding returns a string instead of a buffer\r\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\r\n\r\n    Object.keys(parsed).forEach(function (key) {\r\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\r\n        process.env[key] = parsed[key]\r\n      } else if (debug) {\r\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\r\n      }\r\n    })\r\n\r\n    return { parsed }\r\n  } catch (e) {\r\n    return { error: e }\r\n  }\r\n}\r\n\r\nmodule.exports.config = config\r\nmodule.exports.parse = parse\r\n"]},"metadata":{},"sourceType":"script"}